// Code generated by entc, DO NOT EDIT.

package entdb

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/roderm/example-plugin-system/extensions/github_issues/ent/entdb/issue"
	"github.com/roderm/example-plugin-system/extensions/github_issues/ent/entdb/todo"
)

// IssueCreate is the builder for creating a Issue entity.
type IssueCreate struct {
	config
	mutation *IssueMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (ic *IssueCreate) SetURL(s string) *IssueCreate {
	ic.mutation.SetURL(s)
	return ic
}

// SetIsPr sets the "is_pr" field.
func (ic *IssueCreate) SetIsPr(b bool) *IssueCreate {
	ic.mutation.SetIsPr(b)
	return ic
}

// SetNillableIsPr sets the "is_pr" field if the given value is not nil.
func (ic *IssueCreate) SetNillableIsPr(b *bool) *IssueCreate {
	if b != nil {
		ic.SetIsPr(*b)
	}
	return ic
}

// SetStatus sets the "status" field.
func (ic *IssueCreate) SetStatus(s string) *IssueCreate {
	ic.mutation.SetStatus(s)
	return ic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ic *IssueCreate) SetNillableStatus(s *string) *IssueCreate {
	if s != nil {
		ic.SetStatus(*s)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *IssueCreate) SetID(i int) *IssueCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetIssueID sets the "issue" edge to the Todo entity by ID.
func (ic *IssueCreate) SetIssueID(id int) *IssueCreate {
	ic.mutation.SetIssueID(id)
	return ic
}

// SetNillableIssueID sets the "issue" edge to the Todo entity by ID if the given value is not nil.
func (ic *IssueCreate) SetNillableIssueID(id *int) *IssueCreate {
	if id != nil {
		ic = ic.SetIssueID(*id)
	}
	return ic
}

// SetIssue sets the "issue" edge to the Todo entity.
func (ic *IssueCreate) SetIssue(t *Todo) *IssueCreate {
	return ic.SetIssueID(t.ID)
}

// Mutation returns the IssueMutation object of the builder.
func (ic *IssueCreate) Mutation() *IssueMutation {
	return ic.mutation
}

// Save creates the Issue in the database.
func (ic *IssueCreate) Save(ctx context.Context) (*Issue, error) {
	var (
		err  error
		node *Issue
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IssueMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("entdb: uninitialized hook (forgotten import entdb/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Issue)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IssueMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IssueCreate) SaveX(ctx context.Context) *Issue {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IssueCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IssueCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IssueCreate) defaults() {
	if _, ok := ic.mutation.IsPr(); !ok {
		v := issue.DefaultIsPr
		ic.mutation.SetIsPr(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IssueCreate) check() error {
	if _, ok := ic.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`entdb: missing required field "Issue.url"`)}
	}
	if _, ok := ic.mutation.IsPr(); !ok {
		return &ValidationError{Name: "is_pr", err: errors.New(`entdb: missing required field "Issue.is_pr"`)}
	}
	return nil
}

func (ic *IssueCreate) sqlSave(ctx context.Context) (*Issue, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ic *IssueCreate) createSpec() (*Issue, *sqlgraph.CreateSpec) {
	var (
		_node = &Issue{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: issue.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: issue.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := ic.mutation.IsPr(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: issue.FieldIsPr,
		})
		_node.IsPr = value
	}
	if value, ok := ic.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: issue.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := ic.mutation.IssueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   issue.IssueTable,
			Columns: []string{issue.IssueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: todo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IssueCreateBulk is the builder for creating many Issue entities in bulk.
type IssueCreateBulk struct {
	config
	builders []*IssueCreate
}

// Save creates the Issue entities in the database.
func (icb *IssueCreateBulk) Save(ctx context.Context) ([]*Issue, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Issue, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IssueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IssueCreateBulk) SaveX(ctx context.Context) []*Issue {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IssueCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IssueCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
