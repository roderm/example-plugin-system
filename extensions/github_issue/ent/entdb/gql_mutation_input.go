// Code generated by entc, DO NOT EDIT.

package entdb

import (
	"context"
)

// CreateIssueInput represents a mutation input for creating issues.
type CreateIssueInput struct {
	URL        string
	IsPr       *bool
	Status     *string
	IssueID    *int
	BeforeSave []func(*IssueCreate) error
	AfterSave  []func(*Issue) error
}

// Mutate applies the CreateIssueInput on the IssueCreate builder.
func (i *CreateIssueInput) Mutate(m *IssueCreate) {
	m.SetURL(i.URL)
	if v := i.IsPr; v != nil {
		m.SetIsPr(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.IssueID; v != nil {
		m.SetIssueID(*v)
	}
}

// SetInput applies the change-set in the CreateIssueInput on the create builder.
func (c *IssueCreate) SetInput(i CreateIssueInput) *IssueCreate {
	i.Mutate(c)
	return c
}

// CbSave saves with the hooks applied
func (c *IssueCreate) CbSave(ctx context.Context, i CreateIssueInput) (*Issue, error) {
	c.SetInput(i)
	for _, cb := range i.BeforeSave {
		err := cb(c)
		if err != nil {
			return nil, err
		}
	}
	res, err := c.Save(ctx)
	if err != nil {
		return res, err
	}
	for _, cb := range i.AfterSave {
		err := cb(res)
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// UpdateIssueInput represents a mutation input for updating issues.
type UpdateIssueInput struct {
	URL         *string
	IsPr        *bool
	Status      *string
	ClearStatus bool
	IssueID     *int
	ClearIssue  bool
	BeforeSave  []func(*IssueMutation) error
	AfterSave   []func(*Issue) error
}

// Mutate applies the UpdateIssueInput on the IssueMutation builder.
func (i *UpdateIssueInput) Mutate(m *IssueMutation) {
	if v := i.URL; v != nil {
		m.SetURL(*v)
	}
	if v := i.IsPr; v != nil {
		m.SetIsPr(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearIssue {
		m.ClearIssue()
	}
	if v := i.IssueID; v != nil {
		m.SetIssueID(*v)
	}
}

// SetInput applies the change-set in the UpdateIssueInput on the update builder.
func (u *IssueUpdate) SetInput(i UpdateIssueInput) *IssueUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateIssueInput on the update-one builder.
func (u *IssueUpdateOne) SetInput(i UpdateIssueInput) *IssueUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
