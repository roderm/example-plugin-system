// Code generated by entc, DO NOT EDIT.

package entdb

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/roderm/example-plugin-system/extensions/github_issues/ent/entdb/issue"
	"github.com/roderm/example-plugin-system/extensions/github_issues/ent/entdb/todo"
)

// Issue is the model entity for the Issue schema.
type Issue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// IsPr holds the value of the "is_pr" field.
	IsPr bool `json:"is_pr,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IssueQuery when eager-loading is set.
	Edges IssueEdges `json:"edges"`
}

// IssueEdges holds the relations/edges for other nodes in the graph.
type IssueEdges struct {
	// Issue holds the value of the issue edge.
	Issue *Todo `json:"issue,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IssueOrErr returns the Issue value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IssueEdges) IssueOrErr() (*Todo, error) {
	if e.loadedTypes[0] {
		if e.Issue == nil {
			// The edge issue was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: todo.Label}
		}
		return e.Issue, nil
	}
	return nil, &NotLoadedError{edge: "issue"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Issue) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case issue.FieldIsPr:
			values[i] = new(sql.NullBool)
		case issue.FieldID:
			values[i] = new(sql.NullInt64)
		case issue.FieldURL, issue.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Issue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Issue fields.
func (i *Issue) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case issue.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int(value.Int64)
		case issue.FieldURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[j])
			} else if value.Valid {
				i.URL = value.String
			}
		case issue.FieldIsPr:
			if value, ok := values[j].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_pr", values[j])
			} else if value.Valid {
				i.IsPr = value.Bool
			}
		case issue.FieldStatus:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[j])
			} else if value.Valid {
				i.Status = value.String
			}
		}
	}
	return nil
}

// QueryIssue queries the "issue" edge of the Issue entity.
func (i *Issue) QueryIssue() *TodoQuery {
	return (&IssueClient{config: i.config}).QueryIssue(i)
}

// Update returns a builder for updating this Issue.
// Note that you need to call Issue.Unwrap() before calling this method if this Issue
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Issue) Update() *IssueUpdateOne {
	return (&IssueClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the Issue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Issue) Unwrap() *Issue {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("entdb: Issue is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Issue) String() string {
	var builder strings.Builder
	builder.WriteString("Issue(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", url=")
	builder.WriteString(i.URL)
	builder.WriteString(", is_pr=")
	builder.WriteString(fmt.Sprintf("%v", i.IsPr))
	builder.WriteString(", status=")
	builder.WriteString(i.Status)
	builder.WriteByte(')')
	return builder.String()
}

// Issues is a parsable slice of Issue.
type Issues []*Issue

func (i Issues) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
