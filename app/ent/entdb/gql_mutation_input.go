// Code generated by entc, DO NOT EDIT.

package entdb

import (
	"context"
	"time"
)

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	Description string
	Done        *time.Time
	UserID      int
	BeforeSave  []func(*TodoCreate) error
	AfterSave   []func(*Todo) error
}

// Mutate applies the CreateTodoInput on the TodoCreate builder.
func (i *CreateTodoInput) Mutate(m *TodoCreate) {
	m.SetDescription(i.Description)
	if v := i.Done; v != nil {
		m.SetDone(*v)
	}
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateTodoInput on the create builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c)
	return c
}

// CbSave saves with the hooks applied
func (c *TodoCreate) CbSave(ctx context.Context, i CreateTodoInput) (*Todo, error) {
	c.SetInput(i)
	for _, cb := range i.BeforeSave {
		err := cb(c)
		if err != nil {
			return nil, err
		}
	}
	res, err := c.Save(ctx)
	if err != nil {
		return res, err
	}
	for _, cb := range i.AfterSave {
		err := cb(res)
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	Description *string
	Done        *time.Time
	ClearDone   bool
	UserID      *int
	ClearUser   bool
	BeforeSave  []func(*TodoMutation) error
	AfterSave   []func(*Todo) error
}

// Mutate applies the UpdateTodoInput on the TodoMutation builder.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearDone {
		m.ClearDone()
	}
	if v := i.Done; v != nil {
		m.SetDone(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the update builder.
func (u *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateTodoInput on the update-one builder.
func (u *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Firstname  *string
	Lastname   *string
	Email      string
	TodoIDs    []int
	BeforeSave []func(*UserCreate) error
	AfterSave  []func(*User) error
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	if v := i.Firstname; v != nil {
		m.SetFirstname(*v)
	}
	if v := i.Lastname; v != nil {
		m.SetLastname(*v)
	}
	m.SetEmail(i.Email)
	if ids := i.TodoIDs; len(ids) > 0 {
		m.AddTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// CbSave saves with the hooks applied
func (c *UserCreate) CbSave(ctx context.Context, i CreateUserInput) (*User, error) {
	c.SetInput(i)
	for _, cb := range i.BeforeSave {
		err := cb(c)
		if err != nil {
			return nil, err
		}
	}
	res, err := c.Save(ctx)
	if err != nil {
		return res, err
	}
	for _, cb := range i.AfterSave {
		err := cb(res)
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Firstname      *string
	ClearFirstname bool
	Lastname       *string
	ClearLastname  bool
	Email          *string
	AddTodoIDs     []int
	RemoveTodoIDs  []int
	BeforeSave     []func(*UserMutation) error
	AfterSave      []func(*User) error
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearFirstname {
		m.ClearFirstname()
	}
	if v := i.Firstname; v != nil {
		m.SetFirstname(*v)
	}
	if i.ClearLastname {
		m.ClearLastname()
	}
	if v := i.Lastname; v != nil {
		m.SetLastname(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if ids := i.AddTodoIDs; len(ids) > 0 {
		m.AddTodoIDs(ids...)
	}
	if ids := i.RemoveTodoIDs; len(ids) > 0 {
		m.RemoveTodoIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
